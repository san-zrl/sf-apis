// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type FileEvent struct {
	ProcOID OID `json:"procOID"`

	Ts int64 `json:"ts"`

	Tid int64 `json:"tid"`

	OpFlags int32 `json:"opFlags"`

	FileOID FOID `json:"fileOID"`

	Ret int32 `json:"ret"`

	NewFileOID *UnionNullFOID `json:"newFileOID"`
}

const FileEventAvroCRC64Fingerprint = "(Ì»5\x89\x16qK"

func NewFileEvent() FileEvent {
	r := FileEvent{}
	r.ProcOID = NewOID()

	r.NewFileOID = NewUnionNullFOID()

	return r
}

func DeserializeFileEvent(r io.Reader) (FileEvent, error) {
	t := NewFileEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFileEventFromSchema(r io.Reader, schema string) (FileEvent, error) {
	t := NewFileEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFileEvent(r FileEvent, w io.Writer) error {
	var err error
	err = writeOID(r.ProcOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Tid, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OpFlags, w)
	if err != nil {
		return err
	}
	err = writeFOID(r.FileOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Ret, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFOID(r.NewFileOID, w)
	if err != nil {
		return err
	}
	return err
}

func (r FileEvent) Serialize(w io.Writer) error {
	return writeFileEvent(r, w)
}

func (r FileEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"procOID\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"tid\",\"type\":\"long\"},{\"name\":\"opFlags\",\"type\":\"int\"},{\"name\":\"fileOID\",\"type\":{\"name\":\"FOID\",\"namespace\":\"sysflow.type\",\"size\":20,\"type\":\"fixed\"}},{\"name\":\"ret\",\"type\":\"int\"},{\"name\":\"newFileOID\",\"type\":[\"null\",\"sysflow.type.FOID\"]}],\"name\":\"sysflow.event.FileEvent\",\"type\":\"record\"}"
}

func (r FileEvent) SchemaName() string {
	return "sysflow.event.FileEvent"
}

func (_ FileEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FileEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FileEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FileEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FileEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FileEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FileEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ FileEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FileEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.ProcOID = NewOID()

		return &types.Record{Target: &r.ProcOID}
	case 1:
		return &types.Long{Target: &r.Ts}
	case 2:
		return &types.Long{Target: &r.Tid}
	case 3:
		return &types.Int{Target: &r.OpFlags}
	case 4:
		return &FOIDWrapper{Target: &r.FileOID}
	case 5:
		return &types.Int{Target: &r.Ret}
	case 6:
		r.NewFileOID = NewUnionNullFOID()

		return r.NewFileOID
	}
	panic("Unknown field index")
}

func (r *FileEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FileEvent) NullField(i int) {
	switch i {
	case 6:
		r.NewFileOID = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ FileEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FileEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FileEvent) Finalize()                        {}

func (_ FileEvent) AvroCRC64Fingerprint() []byte {
	return []byte(FileEventAvroCRC64Fingerprint)
}

func (r FileEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["procOID"], err = json.Marshal(r.ProcOID)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["tid"], err = json.Marshal(r.Tid)
	if err != nil {
		return nil, err
	}
	output["opFlags"], err = json.Marshal(r.OpFlags)
	if err != nil {
		return nil, err
	}
	output["fileOID"], err = json.Marshal(r.FileOID)
	if err != nil {
		return nil, err
	}
	output["ret"], err = json.Marshal(r.Ret)
	if err != nil {
		return nil, err
	}
	output["newFileOID"], err = json.Marshal(r.NewFileOID)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FileEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["procOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProcOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for procOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["opFlags"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OpFlags); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for opFlags")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fileOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FileOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fileOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ret"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ret); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ret")
	}
	val = func() json.RawMessage {
		if v, ok := fields["newFileOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NewFileOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for newFileOID")
	}
	return nil
}
