// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type FileFlow struct {
	ProcOID OID `json:"procOID"`

	Ts int64 `json:"ts"`

	Tid int64 `json:"tid"`

	OpFlags int32 `json:"opFlags"`

	OpenFlags int32 `json:"openFlags"`

	EndTs int64 `json:"endTs"`

	FileOID FOID `json:"fileOID"`

	Fd int32 `json:"fd"`

	NumRRecvOps int64 `json:"numRRecvOps"`

	NumWSendOps int64 `json:"numWSendOps"`

	NumRRecvBytes int64 `json:"numRRecvBytes"`

	NumWSendBytes int64 `json:"numWSendBytes"`
}

const FileFlowAvroCRC64Fingerprint = "\xb0\x9a\xb1-\x80\x85G\\"

func NewFileFlow() FileFlow {
	r := FileFlow{}
	r.ProcOID = NewOID()

	return r
}

func DeserializeFileFlow(r io.Reader) (FileFlow, error) {
	t := NewFileFlow()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFileFlowFromSchema(r io.Reader, schema string) (FileFlow, error) {
	t := NewFileFlow()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFileFlow(r FileFlow, w io.Writer) error {
	var err error
	err = writeOID(r.ProcOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Tid, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OpFlags, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OpenFlags, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.EndTs, w)
	if err != nil {
		return err
	}
	err = writeFOID(r.FileOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Fd, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumRRecvOps, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumWSendOps, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumRRecvBytes, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumWSendBytes, w)
	if err != nil {
		return err
	}
	return err
}

func (r FileFlow) Serialize(w io.Writer) error {
	return writeFileFlow(r, w)
}

func (r FileFlow) Schema() string {
	return "{\"fields\":[{\"name\":\"procOID\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"tid\",\"type\":\"long\"},{\"name\":\"opFlags\",\"type\":\"int\"},{\"name\":\"openFlags\",\"type\":\"int\"},{\"name\":\"endTs\",\"type\":\"long\"},{\"name\":\"fileOID\",\"type\":{\"name\":\"FOID\",\"namespace\":\"sysflow.type\",\"size\":20,\"type\":\"fixed\"}},{\"name\":\"fd\",\"type\":\"int\"},{\"name\":\"numRRecvOps\",\"type\":\"long\"},{\"name\":\"numWSendOps\",\"type\":\"long\"},{\"name\":\"numRRecvBytes\",\"type\":\"long\"},{\"name\":\"numWSendBytes\",\"type\":\"long\"}],\"name\":\"sysflow.flow.FileFlow\",\"type\":\"record\"}"
}

func (r FileFlow) SchemaName() string {
	return "sysflow.flow.FileFlow"
}

func (_ FileFlow) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FileFlow) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FileFlow) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FileFlow) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FileFlow) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FileFlow) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FileFlow) SetString(v string)   { panic("Unsupported operation") }
func (_ FileFlow) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FileFlow) Get(i int) types.Field {
	switch i {
	case 0:
		r.ProcOID = NewOID()

		return &types.Record{Target: &r.ProcOID}
	case 1:
		return &types.Long{Target: &r.Ts}
	case 2:
		return &types.Long{Target: &r.Tid}
	case 3:
		return &types.Int{Target: &r.OpFlags}
	case 4:
		return &types.Int{Target: &r.OpenFlags}
	case 5:
		return &types.Long{Target: &r.EndTs}
	case 6:
		return &FOIDWrapper{Target: &r.FileOID}
	case 7:
		return &types.Int{Target: &r.Fd}
	case 8:
		return &types.Long{Target: &r.NumRRecvOps}
	case 9:
		return &types.Long{Target: &r.NumWSendOps}
	case 10:
		return &types.Long{Target: &r.NumRRecvBytes}
	case 11:
		return &types.Long{Target: &r.NumWSendBytes}
	}
	panic("Unknown field index")
}

func (r *FileFlow) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FileFlow) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FileFlow) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FileFlow) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FileFlow) Finalize()                        {}

func (_ FileFlow) AvroCRC64Fingerprint() []byte {
	return []byte(FileFlowAvroCRC64Fingerprint)
}

func (r FileFlow) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["procOID"], err = json.Marshal(r.ProcOID)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["tid"], err = json.Marshal(r.Tid)
	if err != nil {
		return nil, err
	}
	output["opFlags"], err = json.Marshal(r.OpFlags)
	if err != nil {
		return nil, err
	}
	output["openFlags"], err = json.Marshal(r.OpenFlags)
	if err != nil {
		return nil, err
	}
	output["endTs"], err = json.Marshal(r.EndTs)
	if err != nil {
		return nil, err
	}
	output["fileOID"], err = json.Marshal(r.FileOID)
	if err != nil {
		return nil, err
	}
	output["fd"], err = json.Marshal(r.Fd)
	if err != nil {
		return nil, err
	}
	output["numRRecvOps"], err = json.Marshal(r.NumRRecvOps)
	if err != nil {
		return nil, err
	}
	output["numWSendOps"], err = json.Marshal(r.NumWSendOps)
	if err != nil {
		return nil, err
	}
	output["numRRecvBytes"], err = json.Marshal(r.NumRRecvBytes)
	if err != nil {
		return nil, err
	}
	output["numWSendBytes"], err = json.Marshal(r.NumWSendBytes)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FileFlow) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["procOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProcOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for procOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["opFlags"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OpFlags); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for opFlags")
	}
	val = func() json.RawMessage {
		if v, ok := fields["openFlags"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OpenFlags); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for openFlags")
	}
	val = func() json.RawMessage {
		if v, ok := fields["endTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for endTs")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fileOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FileOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fileOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fd"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fd); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fd")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numRRecvOps"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumRRecvOps); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numRRecvOps")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numWSendOps"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumWSendOps); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numWSendOps")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numRRecvBytes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumRRecvBytes); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numRRecvBytes")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numWSendBytes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumWSendBytes); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numWSendBytes")
	}
	return nil
}
