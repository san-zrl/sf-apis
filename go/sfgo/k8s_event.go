// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type K8sEvent struct {
	Ts int64 `json:"ts"`

	Message string `json:"message"`
}

const K8sEventAvroCRC64Fingerprint = "\tÙ²\xc3'B\x8b\""

func NewK8sEvent() K8sEvent {
	r := K8sEvent{}
	return r
}

func DeserializeK8sEvent(r io.Reader) (K8sEvent, error) {
	t := NewK8sEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeK8sEventFromSchema(r io.Reader, schema string) (K8sEvent, error) {
	t := NewK8sEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeK8sEvent(r K8sEvent, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Message, w)
	if err != nil {
		return err
	}
	return err
}

func (r K8sEvent) Serialize(w io.Writer) error {
	return writeK8sEvent(r, w)
}

func (r K8sEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sysflow.event.K8sEvent\",\"type\":\"record\"}"
}

func (r K8sEvent) SchemaName() string {
	return "sysflow.event.K8sEvent"
}

func (_ K8sEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ K8sEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ K8sEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ K8sEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ K8sEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ K8sEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ K8sEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ K8sEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *K8sEvent) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.Ts}
	case 1:
		return &types.String{Target: &r.Message}
	}
	panic("Unknown field index")
}

func (r *K8sEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *K8sEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ K8sEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ K8sEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ K8sEvent) Finalize()                        {}

func (_ K8sEvent) AvroCRC64Fingerprint() []byte {
	return []byte(K8sEventAvroCRC64Fingerprint)
}

func (r K8sEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["message"], err = json.Marshal(r.Message)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *K8sEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["message"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Message); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for message")
	}
	return nil
}
