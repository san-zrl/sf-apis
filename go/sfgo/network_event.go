// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type NetworkEvent struct {
	ProcOID OID `json:"procOID"`

	Ts int64 `json:"ts"`

	Tid int64 `json:"tid"`

	OpFlags int32 `json:"opFlags"`

	Sip int32 `json:"sip"`

	Sport int32 `json:"sport"`

	Dip int32 `json:"dip"`

	Dport int32 `json:"dport"`

	Proto int32 `json:"proto"`

	Ret int32 `json:"ret"`
}

const NetworkEventAvroCRC64Fingerprint = "\xd9g\x01Ñ˜\xe1\xc2\xd0"

func NewNetworkEvent() NetworkEvent {
	r := NetworkEvent{}
	r.ProcOID = NewOID()

	return r
}

func DeserializeNetworkEvent(r io.Reader) (NetworkEvent, error) {
	t := NewNetworkEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNetworkEventFromSchema(r io.Reader, schema string) (NetworkEvent, error) {
	t := NewNetworkEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNetworkEvent(r NetworkEvent, w io.Writer) error {
	var err error
	err = writeOID(r.ProcOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Tid, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OpFlags, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Sip, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Sport, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Dip, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Dport, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Proto, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Ret, w)
	if err != nil {
		return err
	}
	return err
}

func (r NetworkEvent) Serialize(w io.Writer) error {
	return writeNetworkEvent(r, w)
}

func (r NetworkEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"procOID\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"tid\",\"type\":\"long\"},{\"name\":\"opFlags\",\"type\":\"int\"},{\"name\":\"sip\",\"type\":\"int\"},{\"name\":\"sport\",\"type\":\"int\"},{\"name\":\"dip\",\"type\":\"int\"},{\"name\":\"dport\",\"type\":\"int\"},{\"name\":\"proto\",\"type\":\"int\"},{\"name\":\"ret\",\"type\":\"int\"}],\"name\":\"sysflow.event.NetworkEvent\",\"type\":\"record\"}"
}

func (r NetworkEvent) SchemaName() string {
	return "sysflow.event.NetworkEvent"
}

func (_ NetworkEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NetworkEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NetworkEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NetworkEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NetworkEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NetworkEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NetworkEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ NetworkEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NetworkEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.ProcOID = NewOID()

		return &types.Record{Target: &r.ProcOID}
	case 1:
		return &types.Long{Target: &r.Ts}
	case 2:
		return &types.Long{Target: &r.Tid}
	case 3:
		return &types.Int{Target: &r.OpFlags}
	case 4:
		return &types.Int{Target: &r.Sip}
	case 5:
		return &types.Int{Target: &r.Sport}
	case 6:
		return &types.Int{Target: &r.Dip}
	case 7:
		return &types.Int{Target: &r.Dport}
	case 8:
		return &types.Int{Target: &r.Proto}
	case 9:
		return &types.Int{Target: &r.Ret}
	}
	panic("Unknown field index")
}

func (r *NetworkEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NetworkEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NetworkEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NetworkEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NetworkEvent) Finalize()                        {}

func (_ NetworkEvent) AvroCRC64Fingerprint() []byte {
	return []byte(NetworkEventAvroCRC64Fingerprint)
}

func (r NetworkEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["procOID"], err = json.Marshal(r.ProcOID)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["tid"], err = json.Marshal(r.Tid)
	if err != nil {
		return nil, err
	}
	output["opFlags"], err = json.Marshal(r.OpFlags)
	if err != nil {
		return nil, err
	}
	output["sip"], err = json.Marshal(r.Sip)
	if err != nil {
		return nil, err
	}
	output["sport"], err = json.Marshal(r.Sport)
	if err != nil {
		return nil, err
	}
	output["dip"], err = json.Marshal(r.Dip)
	if err != nil {
		return nil, err
	}
	output["dport"], err = json.Marshal(r.Dport)
	if err != nil {
		return nil, err
	}
	output["proto"], err = json.Marshal(r.Proto)
	if err != nil {
		return nil, err
	}
	output["ret"], err = json.Marshal(r.Ret)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NetworkEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["procOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProcOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for procOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["opFlags"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OpFlags); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for opFlags")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sport"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sport); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sport")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dport"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dport); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dport")
	}
	val = func() json.RawMessage {
		if v, ok := fields["proto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Proto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for proto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ret"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ret); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ret")
	}
	return nil
}
