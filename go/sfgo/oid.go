// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type OID struct {
	CreateTS int64 `json:"createTS"`

	Hpid int64 `json:"hpid"`
}

const OIDAvroCRC64Fingerprint = "\x98×…f\x87\xe7\u0602"

func NewOID() OID {
	r := OID{}
	return r
}

func DeserializeOID(r io.Reader) (OID, error) {
	t := NewOID()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOIDFromSchema(r io.Reader, schema string) (OID, error) {
	t := NewOID()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOID(r OID, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.CreateTS, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Hpid, w)
	if err != nil {
		return err
	}
	return err
}

func (r OID) Serialize(w io.Writer) error {
	return writeOID(r, w)
}

func (r OID) Schema() string {
	return "{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"sysflow.type.OID\",\"type\":\"record\"}"
}

func (r OID) SchemaName() string {
	return "sysflow.type.OID"
}

func (_ OID) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OID) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OID) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OID) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OID) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OID) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OID) SetString(v string)   { panic("Unsupported operation") }
func (_ OID) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OID) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.CreateTS}
	case 1:
		return &types.Long{Target: &r.Hpid}
	}
	panic("Unknown field index")
}

func (r *OID) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OID) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OID) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OID) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OID) Finalize()                        {}

func (_ OID) AvroCRC64Fingerprint() []byte {
	return []byte(OIDAvroCRC64Fingerprint)
}

func (r OID) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["createTS"], err = json.Marshal(r.CreateTS)
	if err != nil {
		return nil, err
	}
	output["hpid"], err = json.Marshal(r.Hpid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OID) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["createTS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreateTS); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for createTS")
	}
	val = func() json.RawMessage {
		if v, ok := fields["hpid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hpid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for hpid")
	}
	return nil
}
