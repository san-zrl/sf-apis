// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Pod struct {
	Ts int64 `json:"ts"`

	Id string `json:"id"`

	Name string `json:"name"`

	NodeName string `json:"nodeName"`

	HostIP string `json:"hostIP"`

	InternalIP string `json:"internalIP"`

	Namespace string `json:"namespace"`

	RestartCount int64 `json:"restartCount"`

	Labels map[string]string `json:"labels"`

	Selectors map[string]string `json:"selectors"`

	Services []Service `json:"services"`
}

const PodAvroCRC64Fingerprint = "/\x89\xd6\xd9\xf7лю~"

func NewPod() Pod {
	r := Pod{}
	r.Labels = make(map[string]string)

	r.Selectors = make(map[string]string)

	r.Services = make([]Service, 0)

	return r
}

func DeserializePod(r io.Reader) (Pod, error) {
	t := NewPod()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePodFromSchema(r io.Reader, schema string) (Pod, error) {
	t := NewPod()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePod(r Pod, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NodeName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.HostIP, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.InternalIP, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Namespace, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.RestartCount, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Labels, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Selectors, w)
	if err != nil {
		return err
	}
	err = writeArrayService(r.Services, w)
	if err != nil {
		return err
	}
	return err
}

func (r Pod) Serialize(w io.Writer) error {
	return writePod(r, w)
}

func (r Pod) Schema() string {
	return "{\"fields\":[{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"nodeName\",\"type\":\"string\"},{\"name\":\"hostIP\",\"type\":\"string\"},{\"name\":\"internalIP\",\"type\":\"string\"},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"restartCount\",\"type\":\"long\"},{\"name\":\"labels\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"selectors\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"services\",\"type\":{\"items\":{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"portList\",\"type\":{\"items\":{\"fields\":[{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"targetPort\",\"type\":\"int\"},{\"name\":\"nodePort\",\"type\":\"int\"},{\"name\":\"proto\",\"type\":\"string\"}],\"name\":\"Port\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"clusterIP\",\"type\":\"string\"}],\"name\":\"Service\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"sysflow.entity.Pod\",\"type\":\"record\"}"
}

func (r Pod) SchemaName() string {
	return "sysflow.entity.Pod"
}

func (_ Pod) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Pod) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Pod) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Pod) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Pod) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Pod) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Pod) SetString(v string)   { panic("Unsupported operation") }
func (_ Pod) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pod) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.Ts}
	case 1:
		return &types.String{Target: &r.Id}
	case 2:
		return &types.String{Target: &r.Name}
	case 3:
		return &types.String{Target: &r.NodeName}
	case 4:
		return &types.String{Target: &r.HostIP}
	case 5:
		return &types.String{Target: &r.InternalIP}
	case 6:
		return &types.String{Target: &r.Namespace}
	case 7:
		return &types.Long{Target: &r.RestartCount}
	case 8:
		r.Labels = make(map[string]string)

		return &MapStringWrapper{Target: &r.Labels}
	case 9:
		r.Selectors = make(map[string]string)

		return &MapStringWrapper{Target: &r.Selectors}
	case 10:
		r.Services = make([]Service, 0)

		return &ArrayServiceWrapper{Target: &r.Services}
	}
	panic("Unknown field index")
}

func (r *Pod) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Pod) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Pod) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Pod) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Pod) Finalize()                        {}

func (_ Pod) AvroCRC64Fingerprint() []byte {
	return []byte(PodAvroCRC64Fingerprint)
}

func (r Pod) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["nodeName"], err = json.Marshal(r.NodeName)
	if err != nil {
		return nil, err
	}
	output["hostIP"], err = json.Marshal(r.HostIP)
	if err != nil {
		return nil, err
	}
	output["internalIP"], err = json.Marshal(r.InternalIP)
	if err != nil {
		return nil, err
	}
	output["namespace"], err = json.Marshal(r.Namespace)
	if err != nil {
		return nil, err
	}
	output["restartCount"], err = json.Marshal(r.RestartCount)
	if err != nil {
		return nil, err
	}
	output["labels"], err = json.Marshal(r.Labels)
	if err != nil {
		return nil, err
	}
	output["selectors"], err = json.Marshal(r.Selectors)
	if err != nil {
		return nil, err
	}
	output["services"], err = json.Marshal(r.Services)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Pod) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nodeName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NodeName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nodeName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["hostIP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HostIP); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for hostIP")
	}
	val = func() json.RawMessage {
		if v, ok := fields["internalIP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InternalIP); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for internalIP")
	}
	val = func() json.RawMessage {
		if v, ok := fields["namespace"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Namespace); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for namespace")
	}
	val = func() json.RawMessage {
		if v, ok := fields["restartCount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RestartCount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for restartCount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["labels"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Labels); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for labels")
	}
	val = func() json.RawMessage {
		if v, ok := fields["selectors"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Selectors); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for selectors")
	}
	val = func() json.RawMessage {
		if v, ok := fields["services"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Services); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for services")
	}
	return nil
}
