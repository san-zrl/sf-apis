// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type ProcessFlow struct {
	ProcOID OID `json:"procOID"`

	Ts int64 `json:"ts"`

	NumThreadsCloned int64 `json:"numThreadsCloned"`

	OpFlags int32 `json:"opFlags"`

	EndTs int64 `json:"endTs"`

	NumThreadsExited int64 `json:"numThreadsExited"`

	NumCloneErrors int64 `json:"numCloneErrors"`
}

const ProcessFlowAvroCRC64Fingerprint = "\xfd\u070f\xa3o\xe4:\xfe"

func NewProcessFlow() ProcessFlow {
	r := ProcessFlow{}
	r.ProcOID = NewOID()

	return r
}

func DeserializeProcessFlow(r io.Reader) (ProcessFlow, error) {
	t := NewProcessFlow()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProcessFlowFromSchema(r io.Reader, schema string) (ProcessFlow, error) {
	t := NewProcessFlow()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProcessFlow(r ProcessFlow, w io.Writer) error {
	var err error
	err = writeOID(r.ProcOID, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumThreadsCloned, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OpFlags, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.EndTs, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumThreadsExited, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NumCloneErrors, w)
	if err != nil {
		return err
	}
	return err
}

func (r ProcessFlow) Serialize(w io.Writer) error {
	return writeProcessFlow(r, w)
}

func (r ProcessFlow) Schema() string {
	return "{\"fields\":[{\"name\":\"procOID\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"numThreadsCloned\",\"type\":\"long\"},{\"name\":\"opFlags\",\"type\":\"int\"},{\"name\":\"endTs\",\"type\":\"long\"},{\"name\":\"numThreadsExited\",\"type\":\"long\"},{\"name\":\"numCloneErrors\",\"type\":\"long\"}],\"name\":\"sysflow.flow.ProcessFlow\",\"type\":\"record\"}"
}

func (r ProcessFlow) SchemaName() string {
	return "sysflow.flow.ProcessFlow"
}

func (_ ProcessFlow) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ProcessFlow) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ProcessFlow) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ProcessFlow) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ProcessFlow) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ProcessFlow) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ProcessFlow) SetString(v string)   { panic("Unsupported operation") }
func (_ ProcessFlow) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ProcessFlow) Get(i int) types.Field {
	switch i {
	case 0:
		r.ProcOID = NewOID()

		return &types.Record{Target: &r.ProcOID}
	case 1:
		return &types.Long{Target: &r.Ts}
	case 2:
		return &types.Long{Target: &r.NumThreadsCloned}
	case 3:
		return &types.Int{Target: &r.OpFlags}
	case 4:
		return &types.Long{Target: &r.EndTs}
	case 5:
		return &types.Long{Target: &r.NumThreadsExited}
	case 6:
		return &types.Long{Target: &r.NumCloneErrors}
	}
	panic("Unknown field index")
}

func (r *ProcessFlow) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ProcessFlow) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ProcessFlow) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ProcessFlow) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ProcessFlow) Finalize()                        {}

func (_ ProcessFlow) AvroCRC64Fingerprint() []byte {
	return []byte(ProcessFlowAvroCRC64Fingerprint)
}

func (r ProcessFlow) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["procOID"], err = json.Marshal(r.ProcOID)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["numThreadsCloned"], err = json.Marshal(r.NumThreadsCloned)
	if err != nil {
		return nil, err
	}
	output["opFlags"], err = json.Marshal(r.OpFlags)
	if err != nil {
		return nil, err
	}
	output["endTs"], err = json.Marshal(r.EndTs)
	if err != nil {
		return nil, err
	}
	output["numThreadsExited"], err = json.Marshal(r.NumThreadsExited)
	if err != nil {
		return nil, err
	}
	output["numCloneErrors"], err = json.Marshal(r.NumCloneErrors)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ProcessFlow) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["procOID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProcOID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for procOID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numThreadsCloned"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumThreadsCloned); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numThreadsCloned")
	}
	val = func() json.RawMessage {
		if v, ok := fields["opFlags"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OpFlags); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for opFlags")
	}
	val = func() json.RawMessage {
		if v, ok := fields["endTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for endTs")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numThreadsExited"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumThreadsExited); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numThreadsExited")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numCloneErrors"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumCloneErrors); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numCloneErrors")
	}
	return nil
}
