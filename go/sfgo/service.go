// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Service struct {
	Name string `json:"name"`

	Id string `json:"id"`

	Namespace string `json:"namespace"`

	PortList []Port `json:"portList"`

	ClusterIP string `json:"clusterIP"`
}

const ServiceAvroCRC64Fingerprint = "1\x01\x98`0I\"\xf0"

func NewService() Service {
	r := Service{}
	r.PortList = make([]Port, 0)

	return r
}

func DeserializeService(r io.Reader) (Service, error) {
	t := NewService()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeServiceFromSchema(r io.Reader, schema string) (Service, error) {
	t := NewService()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeService(r Service, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Namespace, w)
	if err != nil {
		return err
	}
	err = writeArrayPort(r.PortList, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClusterIP, w)
	if err != nil {
		return err
	}
	return err
}

func (r Service) Serialize(w io.Writer) error {
	return writeService(r, w)
}

func (r Service) Schema() string {
	return "{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"portList\",\"type\":{\"items\":{\"fields\":[{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"targetPort\",\"type\":\"int\"},{\"name\":\"nodePort\",\"type\":\"int\"},{\"name\":\"proto\",\"type\":\"string\"}],\"name\":\"Port\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"clusterIP\",\"type\":\"string\"}],\"name\":\"sysflow.entity.Service\",\"type\":\"record\"}"
}

func (r Service) SchemaName() string {
	return "sysflow.entity.Service"
}

func (_ Service) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Service) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Service) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Service) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Service) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Service) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Service) SetString(v string)   { panic("Unsupported operation") }
func (_ Service) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Service) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Name}
	case 1:
		return &types.String{Target: &r.Id}
	case 2:
		return &types.String{Target: &r.Namespace}
	case 3:
		r.PortList = make([]Port, 0)

		return &ArrayPortWrapper{Target: &r.PortList}
	case 4:
		return &types.String{Target: &r.ClusterIP}
	}
	panic("Unknown field index")
}

func (r *Service) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Service) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Service) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Service) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Service) Finalize()                        {}

func (_ Service) AvroCRC64Fingerprint() []byte {
	return []byte(ServiceAvroCRC64Fingerprint)
}

func (r Service) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["namespace"], err = json.Marshal(r.Namespace)
	if err != nil {
		return nil, err
	}
	output["portList"], err = json.Marshal(r.PortList)
	if err != nil {
		return nil, err
	}
	output["clusterIP"], err = json.Marshal(r.ClusterIP)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Service) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["namespace"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Namespace); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for namespace")
	}
	val = func() json.RawMessage {
		if v, ok := fields["portList"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PortList); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for portList")
	}
	val = func() json.RawMessage {
		if v, ok := fields["clusterIP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClusterIP); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for clusterIP")
	}
	return nil
}
