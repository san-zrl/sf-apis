// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

type UnionNullOIDTypeEnum int

const (
	UnionNullOIDTypeEnumOID UnionNullOIDTypeEnum = 1
)

type UnionNullOID struct {
	Null      *types.NullVal
	OID       OID
	UnionType UnionNullOIDTypeEnum
}

func writeUnionNullOID(r *UnionNullOID, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullOIDTypeEnumOID:
		return writeOID(r.OID, w)
	}
	return fmt.Errorf("invalid value for *UnionNullOID")
}

func NewUnionNullOID() *UnionNullOID {
	return &UnionNullOID{}
}

func (r *UnionNullOID) Serialize(w io.Writer) error {
	return writeUnionNullOID(r, w)
}

func DeserializeUnionNullOID(r io.Reader) (*UnionNullOID, error) {
	t := NewUnionNullOID()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullOIDFromSchema(r io.Reader, schema string) (*UnionNullOID, error) {
	t := NewUnionNullOID()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullOID) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}]"
}

func (_ *UnionNullOID) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullOID) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullOID) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullOID) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullOID) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullOID) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullOID) SetLong(v int64) {

	r.UnionType = (UnionNullOIDTypeEnum)(v)
}

func (r *UnionNullOID) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.OID = NewOID()
		return &types.Record{Target: (&r.OID)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullOID) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullOID) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullOID) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullOID) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullOID) Finalize()                        {}

func (r *UnionNullOID) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullOIDTypeEnumOID:
		return json.Marshal(map[string]interface{}{"sysflow.type.OID": r.OID})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullOID")
}

func (r *UnionNullOID) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["sysflow.type.OID"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.OID)
	}
	return fmt.Errorf("invalid value for *UnionNullOID")
}
